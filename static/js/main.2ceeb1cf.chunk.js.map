{"version":3,"sources":["redux/actions/filmsActions.js","redux/reducers/films.js","redux/reducers/index.js","redux/store/configureStore.js","components/Header/Header.js","components/SearchBox/SearchBox.js","components/MovieItem/MovieItem.js","components/Movies/Movies.js","components/Favorites/Favorites.js","pages/MainPage/MainPage.js","pages/ListPage/ListPage.js","App.js","index.js"],"names":["getFilmsStarted","type","getFilmsSuccess","jsObj","payload","getFilmsFailure","setUniqID","uniqID","initialState","searchLine","isSearching","searchedFilms","error","isInvisibleButtonAndShowLink","alreadyClicked","title","movies","rootReducer","combineReducers","films","state","action","newArray","slice","selectedFilm","map","obj","imdbID","disabled","find","concat","filteredMovies","filter","searchedFilmsСhangeDisable","store","createStore","applyMiddleware","thunk","Header","className","Component","SearchBox","searchLineChangeHandler","e","valueFromInputInLowerCase","target","value","props","inputNameFilm","searchBoxSubmitHandler","preventDefault","getFilms","this","onSubmit","placeholder","onChange","connect","dispatch","val","valueFromInput","toLowerCase","fetch","then","responseBody","json","Search","catch","err","MovieItem","handleClick","isInvisibleButtonAndShowLinkFALSE","addToList","Title","Year","Poster","src","alt","onClick","disabled-button","id","Movies","console","log","length","movie","key","Favorites","handleChange","event","inputVal","inputNameListFilms","handleclick","saveList","moviesImdbIDArray","objToPOST","postRequestAndGetIdAfterSaveList","isInvisibleButtonAndShowLinkTRUE","handleDelete","deleteFilmFromList","alreadyClickedFALSE","item","href","method","headers","body","JSON","stringify","alreadyClickedTRUE","MainPage","ListPage","match","params","split","join","setState","forEach","elem","jsOb","App","exact","path","component","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2ceeb1cf.chunk.js","sourcesContent":["export const INPUT_NAME_FILM = 'INPUT_NAME_FILM'\n\nexport const GET_FILMS_STARTED = 'GET_FILMS_STARTED'\nexport const GET_FILMS_SUCCESS = 'GET_FILMS_SUCCESS'\nexport const GET_FILMS_FAIL = 'GET_FILMS_FAIL'\n\nexport const ADD_FILM_TO_LIST = 'ADD_FILM_TO_LIST'\n\nexport const INPUT_NAME_LIST_FILMS = 'INPUT_NAME_LIST_FILMS'\n\n\nexport const DELETE_FILM_FROM_LIST = 'DELETE_FILM_FROM_LIST'\n\nexport const SAVE_LIST = 'SAVE_LIST'\n\nexport const SET_UNIQ_ID = 'SET_UNIQ_ID'\n\nexport const INVISIBLE_BUTTON_TRUE = 'INVISIBLE_BUTTON_TRUE'\n\nexport const INVISIBLE_BUTTON_FALSE = 'INVISIBLE_BUTTON_FALSE'\n\nexport const ALREADY_CLICKED_FALSE = 'ALREADY_CLICKED_FALSE'\n\nexport const ALREADY_CLICKED_TRUE = 'ALREADY_CLICKED_TRUE'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// При вводе в инпут поисковой строки меняем СТЕЙТ\nexport const inputNameFilm = (valueFromInputInLowerCase) => ({\n  type: INPUT_NAME_FILM,\n  payload: valueFromInputInLowerCase\n});\n\n\n\n\n\n// После того как В поисковой строке, мы ввели название фильма и после -  НАЖАЛИ   на кнопку    \"Искать\"\nexport const getFilms = (valueFromInput) => {\n\n  return dispatch => {\n\n    // Делаем фетч-запрос за данными.  Переводим в стейте  isSearching в true\n    dispatch(getFilmsStarted());\n\n    let valueFromInputInLowerCase = valueFromInput.toLowerCase()\n\n    fetch(`//www.omdbapi.com/?s=${valueFromInputInLowerCase}&apikey=6fa4c173`)\n\n      .then(responseBody => {\n        return responseBody.json()\n      })\n      .then(jsObj => {\n\n        if(jsObj.Search) {\n          dispatch(getFilmsSuccess(jsObj.Search))\n        }\n\n        else {\n          dispatch(getFilmsFailure());\n        }\n\n        ;\n      })\n      .catch(err => {\n        dispatch(getFilmsFailure());\n      });\n  };\n};\n\n\n\n// Начали загрузку данных. Меняем в стейте флаг isLoading на true\nconst getFilmsStarted = () => ({\n  type: GET_FILMS_STARTED\n});\n\n\n// Когда сделали запрос и получили данные с сервера - записываем эти данные в стейт\nconst getFilmsSuccess = (jsObj) => ({\n  type: GET_FILMS_SUCCESS,\n  payload: jsObj\n});\n\n\n// В стейте устанавливаем поле error в true\nconst getFilmsFailure = () => ({\n  type: GET_FILMS_FAIL\n});\n\n\n\n// -----------------------------\n\n\n// Когда фильмы к нам уже пришли. При нажатии на синюю кнопку \"ДОБАВИТЬ В СПИСОК\"\nexport const addToList = (id) => ({\n  type: ADD_FILM_TO_LIST,\n  payload: id\n});\n\n\n\n\n// Когда пытаемся ввести в инпут НАЗВАНИЕ  СПИСКА ФИЛЬМОВ \nexport const inputNameListFilms = (val) => ({\n  type: INPUT_NAME_LIST_FILMS,\n  payload: val\n});\n\n\n\n\n// Когда в правой части приложения,   в списке фильмов нажимаем на оранжевый крестик - УДАЛИТЬ фильм из списка выбранных фильмов\nexport const deleteFilmFromList = (id) => ({\n  type: DELETE_FILM_FROM_LIST,\n  payload: id\n});\n\n\n\n\n// В правой части приложения, когда нажимаем на кнопку \"СОХРАНИТЬ СПИСОК\"\nexport const saveList = () => ({\n  type: SAVE_LIST\n});\n\n\n\n\n\n// Делаем фетч (пост) запрос ДЛЯ сохранения СПИСКА на сервере и получения уникального id\nexport const postRequestAndGetIdAfterSaveList = (objToPOST) => {\n\n  return dispatch => {\n\n    fetch(`https://acb-api.algoritmika.org/api/movies/list`, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(objToPOST)\n    })\n\n      .then(responseBody => {\n        return responseBody.json()\n      })\n\n\n      .then( jsObj => {\n\n        // Здесь должны задиспатчить экшен с уникальным ID , пришедшем с сервера\n        console.log(\"Уникальный id\", jsObj.id)\n\n        dispatch( setUniqID(jsObj.id) )\n\n      })\n\n  };\n};\n\n\n\n// Начали загрузку данных. Меняем в стейте флаг isLoading на true\nconst setUniqID = (uniqID) => ({\n  type: SET_UNIQ_ID,\n  payload: uniqID\n});\n\n\n\n\n\n// ---------------------- ДЕЛАЕМ КНОПКУ НЕВИДИМОЙ\nexport const isInvisibleButtonAndShowLinkTRUE = () => ({\n  type: INVISIBLE_BUTTON_TRUE\n});\n\n\n// ---------------------- ДЕЛАЕМ КНОПКУ ВИДИМОЙ\nexport const isInvisibleButtonAndShowLinkFALSE = () => ({\n  type: INVISIBLE_BUTTON_FALSE\n});\n\n\n\n\n\n// ---------------------- ДЕЛАЛИ МЫ ПЕРВОЕ НАЖАТИЕ     НА КНОПКУ    \"Добавить в список\"   ? \n\n// ---- НЕТ\nexport const alreadyClickedFALSE = () => ({\n  type: ALREADY_CLICKED_FALSE\n});\n\n\n\n// ---- ДА\nexport const alreadyClickedTRUE = () => ({\n  type: ALREADY_CLICKED_TRUE\n});\n\n\n\n","\n\n// -------------------------------------------------------------  РЕДЮСЕР ------------------------------------------------------------\n\n\n// Импортируем экшены для РЕДЮСЕРА\nimport {\n  INPUT_NAME_FILM,\n  GET_FILMS_STARTED,\n  GET_FILMS_SUCCESS,\n  GET_FILMS_FAIL,\n  ADD_FILM_TO_LIST,\n  INPUT_NAME_LIST_FILMS,\n  DELETE_FILM_FROM_LIST,\n  SET_UNIQ_ID,\n  INVISIBLE_BUTTON_TRUE,\n  INVISIBLE_BUTTON_FALSE\n} from '../actions/filmsActions'\n\n\n\n\n\n// Наш state по-умолчанию. \nconst initialState = {\n\n  // Значение из инпута (строка поиска), будет меняться при вводе данных в инпут\n  searchLine: \"\",\n\n  // Когда нажмём на кнопку \"Искать\" - переменная станет true\n  isSearching: false,\n\n  // Найденные фильмы. При первой загрузке приложения - массив пустой. Фильмов нет\n  searchedFilms: [],\n\n  error: false,\n\n  // Нужно для того, чтобы делать инпут (в правой части приложения)  активным (при нажатии на кнопку ДОБАВИТЬ В СПИСОК)\n  isInvisibleButtonAndShowLink: false,\n\n  // При ПЕРВОЙ загрузке страницы,  когда мы ещё НЕ  нажали на \"Сохранить список\"\n  alreadyClicked: false,\n\n  // ---------------------------\n\n  // Заголовок списка\n  title: \"Новый список\",\n\n  // Выбранные фильмы. Отображаются в правой части\n  movies: [],\n\n\n  // Уникальный id , который приходит с сервера.  Нужен для формирования ссылки\n  uniqID: null\n\n}\n\n\n// РЕДЮСЕР, меняющий state \nexport function filmsReducer(state = initialState, action) {\n  switch (action.type) {\n\n    // Когда что то вводим в инпут\n    case INPUT_NAME_FILM:\n      return { ...state, searchLine: action.payload }\n\n\n      \n\n\n    case GET_FILMS_STARTED:\n      return { ...state, isSearching: true }\n\n\n    case GET_FILMS_SUCCESS:\n      return { ...state, isSearching: false, error: false, movies: [], searchLine: \"\" , searchedFilms: action.payload }\n\n\n    case GET_FILMS_FAIL:\n      return { ...state, isSearching: false, error: true, searchedFilms: [] }\n\n\n\n\n      // Когда нажимаем синюю кнопку \"Добавить в список\"\n      case ADD_FILM_TO_LIST:\n\n        // Копируем массив \n        let newArray = state.searchedFilms.slice()\n\n        // Перебираем его, и ищем нужный нам объект по id.  Когда нашли - добавляем этому объекту новое свойство disabled: true. Это выключит кнопку \n        newArray = newArray.map( obj => {\n\n          if(obj.imdbID === action.payload) {\n\n            return {\n\n              ...obj,\n\n              disabled: true\n\n            }\n\n          }\n\n          else {\n            return obj\n          }\n\n        } )\n\n\n        // Теперь ищем выбранный нами фильм \n        let selectedFilm = newArray.find( obj => {\n\n          return obj.imdbID === action.payload\n\n        })\n\n        // console.log(\"Выбранный фильм movies\", movies)\n        return { ...state,  searchedFilms: newArray, movies: state.movies.concat(selectedFilm) }\n  \n\n\n      // Когда  ВВОДИМ В ИНПУТ  название списка фильмов\n      case INPUT_NAME_LIST_FILMS:\n        return { ...state, title: action.payload }\n\n\n\n\n\n      // Когда  удаляем фильм из списка выбранных фильмов  -  когда нажимаем на оранжевый крестик \n      case DELETE_FILM_FROM_LIST:\n\n        // Нужно УДАЛИТЬ фильм из массива выбранных фильмов -  movies , отфильтровав этот массив  \n        let filteredMovies = state.movies.filter( obj => {\n\n          return obj.imdbID !== action.payload\n\n        })\n\n\n        // Нужно по id  найти этот же фильм  уже   в массиве searchedFilms  и поменять у него свойство disabled на false\n        let searchedFilmsСhangeDisable = state.searchedFilms.map( obj => {\n\n\n          if(obj.imdbID === action.payload) {\n\n            return {\n              ...obj,\n              disabled: false\n            }\n\n          }\n\n          else {\n            return obj\n          }\n\n        } )\n\n        return { ...state, movies: filteredMovies,  searchedFilms: searchedFilmsСhangeDisable }\n\n\n\n\n      // Когда  в правой части приложения мы нажимаем на кнопку  СОХРАНИТЬ СПИСОК \n      case SET_UNIQ_ID: \n        return { ...state,  uniqID: action.payload }\n        \n\n      // Делаем кнопку невидимой\n      case INVISIBLE_BUTTON_TRUE: \n        return { ...state, isInvisibleButtonAndShowLink: true }\n      \n      // Делаем кнопку ВИДИМОЙ\n      case INVISIBLE_BUTTON_FALSE: \n        return { ...state, isInvisibleButtonAndShowLink: false }\n    \n          \n\n      // В левой части - При клике на кнопку \"Добавить в список\" мы должны перевести alreadyClicked в false, что сделает кнопку \"Сохранить список\" видимой\n      // И в правой части - при нажатии на крестик (Кнопка Удалить)\n      case INVISIBLE_BUTTON_FALSE: \n        return { ...state, alreadyClicked: false }\n    \n      // В правой части - Это будет вызываться  при клике на кнопку  СОХРАНИТЬ СПИСОК\n      case INVISIBLE_BUTTON_TRUE: \n        return { ...state, alreadyClicked: true }\n    \n\n\n    // Если передали экшен с неопознанным типом, возвращаем наш прежний state без изменений\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\n\nimport { filmsReducer } from './films'\n\n\nexport const rootReducer = combineReducers({\n\n  films: filmsReducer\n  \n})\n","import { createStore, applyMiddleware } from 'redux'\nimport { rootReducer } from '../reducers'\n\n// import { composeWithDevTools } from 'redux-devtools-extension';\n\n\nimport thunk from 'redux-thunk'\n\n\n// export const store = createStore(\n//   rootReducer,\n//   composeWithDevTools(\n//     applyMiddleware(thunk))\n// );\n\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\n\n\n\n\n\n// import { createStore, applyMiddleware } from 'redux'\n// import { rootReducer } from '../reducers'\n// // import logger from 'redux-logger'\n// import thunk from 'redux-thunk'\n\n// // Создаём стор на основе корневого редюсера (applyMiddleware - промежуточные обработчики)\n// export const store = createStore(rootReducer, applyMiddleware(thunk))\n\n\n// // нужно ещё как-то приделать        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n// // Пока это работает только  если ВМЕСТО  applyMiddleware(thunk)\n","import React, { Component } from 'react';\nimport './Header.css';\n\nclass Header extends Component {\n    render() { \n        return (\n            <header className=\"header\">\n                <h1 className=\"header__title\">\n                    MustSee.  On React-Redux\n                </h1>\n            </header>\n        );\n    }\n}\n \nexport default Header;\n","import React, { Component } from 'react';\nimport './SearchBox.css';\n\n//  Подключаем   встроенную в Redux  функцию connect, которая позволит нам присоединяться к store и   брать  оттуда нужную часть информации\nimport { connect } from 'react-redux'\n\n//  Подключаем экшен (экшен-криейтор inputNameFilm)    \nimport { inputNameFilm, getFilms } from '../../redux/actions/filmsActions'\n\n\n\nclass SearchBox extends Component {\n    // state = {\n    //     searchLine: ''\n    // }\n\n\n    // При ВВОДЕ данных в инпут мы будем запускать экшен-криейтор, устанавливающий эту строку в стейт\n    searchLineChangeHandler = (e) => {\n\n      let valueFromInputInLowerCase = e.target.value\n\n      // Функция, которая будет диспатчить в стейт  - значение из инпута \n      this.props.inputNameFilm(valueFromInputInLowerCase)\n\n    }\n\n\n\n    // Нажать на кнопку \"Искать\". Сработает асинхронный экшен\n    searchBoxSubmitHandler = (e) => {\n      e.preventDefault();\n\n      // Извлекаем значение из стейта\n      const { searchLine } = this.props.films;\n\n      // Вызываем асинхронный экшен\n      this.props.getFilms(searchLine)\n\n    }\n\n\n\n\n    render() {\n        //                 Где this.props.films - это ВСЁ состояние из редюсера films\n        const { searchLine } = this.props.films;\n\n        return (\n            <div className=\"search-box\">\n                <form className=\"search-box__form\" onSubmit={this.searchBoxSubmitHandler}>\n                    <label className=\"search-box__form-label\">\n                        Искать фильм по названию:\n                        <input\n                            value={searchLine}\n                            type=\"text\"\n                            className=\"search-box__form-input\"\n                            placeholder=\"Например, Godfather\"\n                            onChange={this.searchLineChangeHandler}\n                        />\n                    </label>\n\n                    <button\n                        type=\"submit\"\n                        className=\"search-box__form-submit\"\n                        disabled={!searchLine}\n                    >\n                        Искать\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n\n\n \n// Этот метод нужен для того, чтобы взять из store какие-то данные и передать их в качестве пропсов КОНТЕЙНЕРУ PageContainerge\n// То есть здесь мы берём весь store и отрезаем от него лишь нужный нам кусочек\nconst mapStateToProps = store => {\n  return {\n    films: store.films // store.films - это ВСЁ состояние  state, которое  мы   создавали  в редюсере page (см. папку reducers - файл index.js)\n  }\n}\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    inputNameFilm: (val) => dispatch(inputNameFilm(val)),\n\n    getFilms: (val) => dispatch(getFilms(val)),\n \n  }\n}\n\n// Контейнер PageContainer присоединяется к store  при помощи connect, берёт оттуда нужные данные и прокидывает их КОНТЕЙНЕРУ PageContainerge через props\n//  (при помощи mapStateToPropsи mapDispatchToProps)\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SearchBox)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { Component } from 'react';\n// import './SearchBox.css';\n\n\n\n\n// class SearchBox extends Component {\n//     state = {\n//         searchLine: ''\n//     }\n\n\n//     // При вводе данных в инпут\n//     searchLineChangeHandler = (e) => {\n//         this.setState({ searchLine: e.target.value });\n//     }\n\n\n//     // Нажать на кнопку \"Отправить\"\n//     searchBoxSubmitHandler = (e) => {\n//         e.preventDefault();\n//     }\n\n\n\n//     render() {\n//         const { searchLine } = this.state;\n\n//         return (\n//             <div className=\"search-box\">\n//                 <form className=\"search-box__form\" onSubmit={this.searchBoxSubmitHandler}>\n//                     <label className=\"search-box__form-label\">\n//                         Искать фильм по названию:\n//                         <input\n//                             value={searchLine}\n//                             type=\"text\"\n//                             className=\"search-box__form-input\"\n//                             placeholder=\"Например, Shawshank Redemption\"\n//                             onChange={this.searchLineChangeHandler}\n//                         />\n//                     </label>\n//                     <button\n//                         type=\"submit\"\n//                         className=\"search-box__form-submit\"\n//                         disabled={!searchLine}\n//                     >\n//                         Искать\n//                     </button>\n//                 </form>\n//             </div>\n//         );\n//     }\n// }\n \n// export default SearchBox;\n","import React, { Component } from 'react';\nimport './MovieItem.css';\n\n//  Подключаем   встроенную в Redux  функцию connect, которая позволит нам присоединяться к store и   брать  оттуда нужную часть информации\nimport { connect } from 'react-redux'\n\n//  Подключаем экшен (экшен-криейтор addToList)    для того, чтобы отметить фильм как ДОБАВЛЕННЫЙ В СПИСОК\nimport { addToList } from '../../redux/actions/filmsActions'\n\nimport { isInvisibleButtonAndShowLinkFALSE } from '../../redux/actions/filmsActions'\n\n\n\n\n\n\nclass MovieItem extends Component {\n\n    // Функция срабатывает при клике на кнопку \"Добавить в список\"\n    handleClick = ()=> {\n\n      this.props.isInvisibleButtonAndShowLinkFALSE()\n\n      this.props.addToList(this.props.imdbID)\n\n    }\n    \n    \n\n\n    render() {\n      \n        const { Title, Year, Poster, addToList, imdbID, disabled } = this.props;\n\n        return (\n            <article className=\"movie-item\">\n                {/* <img className=\"movie-item__poster\" src={Poster} alt={Title} /> */}\n\n                <img className=\"movie-item__poster\" src={Poster !== \"N/A\" ? Poster : `https://via.placeholder.com/106x150.png?text=${Title}` } alt={Title} />\n\n                <div className=\"movie-item__info\">\n                    <h3 className=\"movie-item__title\">{Title}&nbsp;({Year})</h3>\n\n              <button disabled={ disabled ? true : false } onClick={this.handleClick} type=\"button\"\n                     className={ disabled ? \"movie-item__add-button disabled-button\" : \"movie-item__add-button\" } disabled-button\n                     >Добавить в список\n              </button>\n\n                </div>\n            </article>\n        );\n    }\n}\n \n\n\n\n\n//  этот метод нужен для того, чтобы запустить экшен-креатор     addToList     в момент нажатия пользователя на кнопку \nconst mapDispatchToProps = dispatch => {\n  return {\n    addToList: (id) => dispatch(addToList(id)),\n    isInvisibleButtonAndShowLinkFALSE: () => dispatch(isInvisibleButtonAndShowLinkFALSE())\n\n  }\n}\n\n// Контейнер PageContainer присоединяется к store  при помощи connect, берёт оттуда нужные данные и прокидывает их КОНТЕЙНЕРУ PageContainerge через props\n//  (при помощи mapStateToPropsи mapDispatchToProps)\nexport default connect(\n  function() {},\n  mapDispatchToProps\n)(MovieItem)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { Component } from 'react';\n// import './MovieItem.css';\n\n// //  Подключаем   встроенную в Redux  функцию connect, которая позволит нам присоединяться к store и   брать  оттуда нужную часть информации\n// import { connect } from 'react-redux'\n\n// //  Подключаем экшен (экшен-криейтор addToList)    для того, чтобы отметить фильм как ДОБАВЛЕННЫЙ В СПИСОК\n// import { addToList } from '../../redux/actions/filmsActions'\n\n\n\n\n\n// class MovieItem extends Component {\n//     render() {\n      \n//         const { Title, Year, Poster, addToList, imdbID, disabled } = this.props;\n\n//         return (\n//             <article className=\"movie-item\">\n//                 <img className=\"movie-item__poster\" src={Poster} alt={Title} />\n//                 <div className=\"movie-item__info\">\n//                     <h3 className=\"movie-item__title\">{Title}&nbsp;({Year})</h3>\n//                     <button disabled={ disabled ? true : false } onClick={()=> addToList(imdbID)} type=\"button\"\n//                      className={ disabled ? \"movie-item__add-button disabled-button\" : \"movie-item__add-button\" } disabled-button\n//                      >Добавить в список</button>\n//                 </div>\n//             </article>\n//         );\n//     }\n// }\n \n\n\n\n\n// //  этот метод нужен для того, чтобы запустить экшен-креатор     addToList     в момент нажатия пользователя на кнопку \n// const mapDispatchToProps = dispatch => {\n//   return {\n//     addToList: (id) => dispatch(addToList(id))\n//   }\n// }\n\n// // Контейнер PageContainer присоединяется к store  при помощи connect, берёт оттуда нужные данные и прокидывает их КОНТЕЙНЕРУ PageContainerge через props\n// //  (при помощи mapStateToPropsи mapDispatchToProps)\n// export default connect(\n//   function() {},\n//   mapDispatchToProps\n// )(MovieItem)\n","import React, { Component } from 'react';\nimport MovieItem from '../MovieItem/MovieItem';\nimport './Movies.css';\n\n//  Подключаем   встроенную в Redux  функцию connect, которая позволит нам присоединяться к store и   брать  оттуда нужную часть информации\nimport { connect } from 'react-redux'\n\n\n\n\nclass Movies extends Component {\n\n    render() { \n\n        //                    Где this.props.films - это ВСЁ состояние из редюсера films\n        const { searchedFilms, error } = this.props.films;\n\n        console.log( searchedFilms )\n        \n        return ( \n\n          <ul className=\"movies\">\n\n            { searchedFilms.length == 0 && error ? (\n\n              <li className=\"movies__item\" >\n                Фильм не найден\n              </li>\n\n              ) \n            \n            \n            : (\n\n              (searchedFilms.map((movie) => (\n\n                <li className=\"movies__item\" key={movie.imdbID}>\n                    <MovieItem {...movie} />\n                </li>\n    \n                ))) \n\n            )\n            \n\n            \n            }\n\n\n\n          </ul>\n        );\n\n    }\n}\n \n\n\nconst mapStateToProps = store => {\n  return {\n    films: store.films \n  }\n}\n\n\n\n// Контейнер PageContainer присоединяется к store  при помощи connect, берёт оттуда нужные данные и прокидывает их КОНТЕЙНЕРУ PageContainerge через props\n//  (при помощи mapStateToPropsи mapDispatchToProps)\nexport default connect(\n  mapStateToProps,\n  function() {}\n)(Movies)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { Component } from 'react';\n// import MovieItem from '../MovieItem/MovieItem';\n// import './Movies.css';\n\n// class Movies extends Component {\n//     state = { \n//         movies: [\n//             {\n//                 imdbID: 'tt3896198',\n//                 title: \"Guardians of the Galaxy Vol. 2\",\n//                 year: 2017,\n//                 poster: \"https://m.media-amazon.com/images/M/MV5BNjM0NTc0NzItM2FlYS00YzEwLWE0YmUtNTA2ZWIzODc2OTgxXkEyXkFqcGdeQXVyNTgwNzIyNzg@._V1_SX300.jpg\"\n\n//             },\n//             {\n//                 imdbID: 'tt0068646',\n//                 title: \"The Godfather\",\n//                 year: 1972,\n//                 poster: \"https://m.media-amazon.com/images/M/MV5BM2MyNjYxNmUtYTAwNi00MTYxLWJmNWYtYzZlODY3ZTk3OTFlXkEyXkFqcGdeQXVyNzkwMjQ5NzM@._V1_SX300.jpg\"\n\n//             }\n//         ]\n//     }\n//     render() { \n//         return ( \n//             <ul className=\"movies\">\n//                 {this.state.movies.map((movie) => (\n//                     <li className=\"movies__item\" key={movie.imdbID}>\n//                         <MovieItem {...movie} />\n//                     </li>\n//                 ))}\n//             </ul>\n//         );\n//     }\n// }\n \n// export default Movies;\n","import React, { Component } from 'react';\n\nimport './Favorites.css';\n\n\n//  Подключаем   встроенную в Redux  функцию connect, которая позволит нам присоединяться к store и   брать  оттуда нужную часть информации\nimport { connect } from 'react-redux'\n\n//  Подключаем экшен (экшен-криейтор inputNameListFilms)  который при вводе в инпут меняет стейт\nimport { inputNameListFilms } from '../../redux/actions/filmsActions'\nimport { deleteFilmFromList } from '../../redux/actions/filmsActions'\nimport { saveList } from '../../redux/actions/filmsActions'\nimport { postRequestAndGetIdAfterSaveList } from '../../redux/actions/filmsActions'\nimport { isInvisibleButtonAndShowLinkTRUE } from '../../redux/actions/filmsActions'\nimport { isInvisibleButtonAndShowLinkFALSE } from '../../redux/actions/filmsActions'\n\nimport { alreadyClickedFALSE } from '../../redux/actions/filmsActions'\n\nimport { alreadyClickedTRUE } from '../../redux/actions/filmsActions'\n\n\n\n\n\n\n\n\n\nclass Favorites extends Component {\n\n\n    state = {\n\n      // Скрыта ли кнопка? Показана ли ссылка?\n      // isInvisibleButtonAndShowLink: false,\n\n      // Когда мы ещё НЕ  нажали на \"Сохранить список\"\n      alreadyClicked: false\n\n    }\n\n\n    handleChange = (event)=> {\n\n      let inputVal = event.target.value\n\n      this.props.inputNameListFilms(inputVal)\n\n    }\n\n\n\n\n\n    // Клик по кнопке СОХРАНИТЬ СПИСОК\n    handleclick = () => {\n\n      this.props.saveList()\n\n\n      // Формируем объект для ПОСТ-запроса\n      let moviesImdbIDArray = this.props.films.movies.map( obj => {\n        return obj.imdbID\n      } )\n\n\n      let objToPOST = {\n        \"title\": this.props.films.title,\n\n        \"movies\": moviesImdbIDArray\n      }\n\n      // Здесь вызываем асинх.функцию postRequestAndGetIdAfterSaveList, передавая ей объект objToPOST\n      this.props.postRequestAndGetIdAfterSaveList(objToPOST)\n\n      this.props.isInvisibleButtonAndShowLinkTRUE()\n\n      // this.setState({ alreadyClicked: true })\n\n    }\n\n\n\n\n    // При нажатии на УДАЛИТЬ  (красный крестик)\n    handleDelete = (id, movies) => {\n\n      // Удаляем фильм \n      this.props.deleteFilmFromList(id)\n\n\n      this.props.isInvisibleButtonAndShowLinkFALSE()\n\n      this.props.alreadyClickedFALSE()\n\n      // this.setState({ alreadyClicked: false })\n      \n    }\n\n\n\n\n    render() { \n\n      const {title, movies, uniqID, isInvisibleButtonAndShowLink, alreadyClicked} = this.props.films\n\n      return (\n          <div className=\"favorites\">\n\n              <input disabled={ isInvisibleButtonAndShowLink ? true : false } onChange={this.handleChange} value={title} className=\"favorites__name\" />\n\n              <ul className=\"favorites__list\">\n                  {movies.map((item) => {\n                      return (\n                        <li className=\"list-item\" key={item.imdbID}>\n                          <span onClick={ ()=> this.handleDelete(item.imdbID, movies) } className=\"list-item__delete-button\">X</span>\n                          \n                           {item.Title} ({item.Year})\n                        </li>\n                      );\n                  })}\n              </ul>\n\n\n\n\n              { !isInvisibleButtonAndShowLink && !alreadyClicked ? (\n\n                <button onClick={ this.handleclick } disabled={ movies.length === 0 ? true : false } type=\"button\" className=\"favorites__save\">Сохранить список</button>\n\n              ) : (\n\n                movies.length > 0 ? <a href={`/must-see/:${uniqID}`} target=\"_blank\" className=\"link-to-another-page\" >Ссылка на страницу со списком фильмов</a> : null\n                \n              ) }\n              \n          </div>\n      );\n    }\n}\n\n\n\n \n\nconst mapStateToProps = store => {\n  return {\n    films: store.films \n  }\n}\n\n//  этот метод нужен для того, чтобы запустить экшен-креатор     addToList     в момент нажатия пользователя на кнопку \nconst mapDispatchToProps = dispatch => {\n  return {\n    inputNameListFilms: (val) => dispatch(inputNameListFilms(val)),\n\n    deleteFilmFromList: (id) => dispatch(deleteFilmFromList(id)),\n\n    saveList: () => dispatch(saveList()),\n\n    postRequestAndGetIdAfterSaveList: (objToPOST) => dispatch(postRequestAndGetIdAfterSaveList(objToPOST)),\n\n    isInvisibleButtonAndShowLinkTRUE: () => dispatch(isInvisibleButtonAndShowLinkTRUE()),\n\n    isInvisibleButtonAndShowLinkFALSE: () => dispatch(isInvisibleButtonAndShowLinkFALSE()),\n\n    alreadyClickedFALSE: () => dispatch(alreadyClickedFALSE()),\n\n    alreadyClickedTRUE: () => dispatch(alreadyClickedTRUE()),\n  }\n}\n\n\n\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Favorites)\n\n\n\n\n\n\n\n\n","import React, { Component } from 'react';\nimport './MainPage.css';\nimport Header from '../../components/Header/Header';\nimport SearchBox from '../../components/SearchBox/SearchBox';\nimport Movies from '../../components/Movies/Movies';\nimport Favorites from '../../components/Favorites/Favorites';\n\n\n// Главная страница\nclass MainPage extends Component {\n    render() { \n        return (\n            <div className=\"main-page\">\n                <Header />\n                <main className=\"main-page__content\">\n                    <section className=\"main-page__main-section\">\n                        <div className=\"main-page__search-box\">\n                            <SearchBox />\n                        </div>\n                        <div className=\"main-page__movies\">\n                            <Movies />\n                        </div>\n                    </section>\n                    <aside className=\"main-page__favorites\">\n                        <Favorites />\n                    </aside>\n                </main>\n            </div>\n        );\n    }\n}\n \nexport default MainPage;\n\n\n// 6fa4c173\n","import React, { Component } from 'react';\nimport './ListPage.css';\n\n//  Подключаем   встроенную в Redux  функцию connect, которая позволит нам присоединяться к store и   брать  оттуда нужную часть информации\nimport { connect } from 'react-redux'\n\n\n\n\n\n\n\n//  КОМПОНЕНТ -   отдельная страница, на которой  отображается название списка и связанные с ним фильмы.\nclass ListPage extends Component {\n    state = {\n\n      title: \"Мой список\",\n\n      movies: []\n\n      // movies: [\n      //     { title: 'The Godfather', year: 1972, imdbID: 'tt0068646' }\n      // ]\n\n    }\n\n    \n    componentDidMount() {\n\n      // Забираем id-шник.   Например,     4f34c271-55ca-42e8-a4a7-5942c832e811\n        let id = this.props.match.params.id;\n\n        id = id.split(\"\").slice(1).join(\"\")\n\n        console.log(\"Айдишник из параметров\", id)\n\n        // Делаем запрос к сервер на получение списка https://acb-api.algoritmika.org/api/movies/list/идентификатор\n        fetch(`https://acb-api.algoritmika.org/api/movies/list/${id}`)\n          .then( responseBody => responseBody.json() )\n          .then( jsObj => {\n            console.log(\"Ответ с сервера, в виде объекта\", jsObj)\n\n            // Вот что нам придёт в ответ\n            // {\n            //   \"title\": \"Новый список\",\n            //   \"movies\": [\n            //   \"tt1800684\",\n            //   \"tt0275116\"\n            //   ],\n            //   \"id\": \"4f34c271-55ca-42e8-a4a7-5942c832e811\"\n            // }\n\n            if(jsObj.movies) {\n\n              this.setState({ title: jsObj.title })\n\n              // запросы к серверу по каждому фильму  imdbID:  tt1800684   и   tt0275116\n              jsObj.movies.forEach( elem => {\n\n                fetch(`http://www.omdbapi.com/?i=${elem}&apikey=6fa4c173`)\n                .then( responseBody => responseBody.json() )\n                .then( jsOb => {\n\n                  this.setState({ movies: this.state.movies.concat(jsOb) })\n\n                })\n\n              })\n\n            }\n\n          })\n\n\n\n    }\n\n\n\n    \n\n\n\n\n\n\n\n\n    render() { \n        return (\n            <div className=\"list-page\">\n                <h1 className=\"list-page__title\">{this.state.title}</h1>\n                <ul>\n                    {this.state.movies.map((item) => {\n                        return (\n                            <li className=\"list-item-film\" key={item.imdbID}>\n                                {/* <img className=\"list-item-poster\" src={item.Poster} alt=\"Постер\"></img> */}\n\n                                <img className=\"list-item-poster\" src={item.Poster !== \"N/A\" ? item.Poster : `https://via.placeholder.com/300x400.png?text=${item.Title}`} alt=\"Постер\"></img>\n\n                                <a className=\"link-to-imdb\" href={`https://www.imdb.com/title/${item.imdbID}/`} target=\"_blank\">{item.Title} ({item.Year})</a>\n                            </li>\n                        );\n                    })}\n                </ul>\n            </div>\n        );\n    }\n}\n \n\n\n\n\nconst mapStateToProps = store => {\n  return {\n    films: store.films \n  }\n}\n\n\n\nexport default connect(\n  mapStateToProps,\n  function() {}\n)(ListPage)\n\n\n\n\n// 6fa4c173\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport MainPage from './pages/MainPage/MainPage';\nimport ListPage from './pages/ListPage/ListPage';\n\nimport './reset.css';\nimport './common.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <Route exact path=\"/must-see\" component={MainPage} />\n        <Route path=\"/must-see/:id\" exact component={ListPage} />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { Provider } from 'react-redux'\nimport { store } from './redux/store/configureStore'\n\nimport App from './App';\n\nReactDOM.render(\n  <BrowserRouter>\n\n    <Provider store={store}>\n      <App />\n    </Provider>\n    \n  </BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}